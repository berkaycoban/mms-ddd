generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  manager
  customer
}

model User {
  id String @id @default(uuid())

  username String @unique
  password String
  age      Int

  role   UserRole @default(customer)
  Ticket Ticket[]
  Watch  Watch[]

  @@map("users")
}

model Movie {
  id String @id @default(uuid())

  name           String
  ageRestriction Int

  Session Session[]
  Watch   Watch[]

  @@map("movies")
}

model Session {
  id String @id @default(uuid())

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  date       DateTime
  roomNumber Int
  Ticket     Ticket[]
  Watch      Watch[]

  @@unique([date, roomNumber]) // for each room and date should be unique
  @@map("sessions")
}

enum TicketStatus {
  active
  used
}

model Ticket {
  id String @id @default(uuid())

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status TicketStatus @default(active)
  Watch  Watch[]

  @@map("tickets")
}

model Watch {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ticketId String @unique
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("watches")
}
